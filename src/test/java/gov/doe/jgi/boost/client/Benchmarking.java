package gov.doe.jgi.boost.client;

import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.json.JSONObject;

import gov.doe.jgi.boost.client.constants.BOOSTClientConfigs;
import gov.doe.jgi.boost.client.constants.LoginCredentials;
import gov.doe.jgi.boost.enums.FileFormat;
import gov.doe.jgi.boost.enums.Strategy;
import gov.doe.jgi.boost.enums.Vendor;

/**
 * The DemoClient exemplifies how to invoke each functionality 
 * of the BOOST REST API.  
 *  
 * @author Ernst Oberortner
 */
public class Benchmarking {
	
	// benchmarking fasta was generated by BOOST !!!
	// /Users/eoberortner/Projects/JGI/BOOST/coding/git/BOOST/src/test/java/gov/doe/jgi/automation/boost/GenerateRandomSequences.java

	public static final String SEQUENCES_FILENAME = "./data/benchmarking.fasta";
	public static final int NR_OF_JOBS = 1;
	
	/*-------------
	 * MAIN
	 *-------------*/
	public static void main(String[] args) 
			throws Exception {

		/*
		 * login
		 */
		// -- alternative 2: provider you BOOST username and password
  	    BOOSTClient client = new BOOSTClient(LoginCredentials.mJWT);
    
		// get the predefined hosts
		JSONObject jsonPredefinedHosts = client.getPredefinedHosts();
		try {
			System.out.println(jsonPredefinedHosts.toString(4));
		}catch(NullPointerException e) {
			System.out.println(e.getMessage() + " Error in jsonPredefinedHosts");
			System.exit(1);
		}

		// set the target namespace
		BOOSTClientConfigs.SBOL_TARGET_NAMESPACE = "https://boost.jgi.doe.gov/";
		
		// we store all submitted jobs in a hash-set
		Set<String> jobUUIDs = new HashSet<String>();
		
		
		for(int i=1; i<=NR_OF_JOBS; i++) {
			
			// polish the given DNA
			String polishDNAJobUUID = client.polish(
					SEQUENCES_FILENAME,
					BOOSTClientConfigs.SBOL_TARGET_NAMESPACE, 	// target namespace
					true,                         // encoding sequences support sequence feature annotations
					Vendor.LIFE_TECHNOLOGIES,	  // vendor
					Strategy.Balanced2Random,     // codon selection strategy
					FileFormat.SBOL,              // output format
					"Saccharomyces cerevisiae");  // // predefined host
			
			if (null != polishDNAJobUUID) {
				jobUUIDs.add(polishDNAJobUUID);
				System.out.println("Data for DNA Polish :" + polishDNAJobUUID);
			}
			
		}

		// for all jobs, we check their status
		for(String jobUUID : jobUUIDs) {
			
			JSONObject jobReport = null;
			while(null == (jobReport = client.getJobReport(jobUUID))) {
				
				// if the job isn't finished, then we wet some seconds
				// and check again
				System.out.println("Job " + jobUUID + " is not finished yet.");
				
				try {
					Thread.sleep(5000);
				} catch(Exception e) {}
			}

			// output of the job report (which is a JSON object)
			System.out.println(jobReport.toString(4));

			FileUtils.writeStringToFile(Paths.get("./response-" + jobUUID + ".json").toFile(), jobReport.toString(4));
		}
	}
}
